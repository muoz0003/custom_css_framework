// =============================================================================
// LAYOUT STYLING - Luz Helena's Responsibility
// =============================================================================

// 
@use 'sass:math';
@use '../variables/config' as config;
@use '../variables/colors' as colors;

// Base layout styles
body {
  font-family: config.$font-family-base;
  font-size: config.$font-size-base;
  line-height: config.$line-height-base;
  color: colors.$body-color;              
  background-color: colors.$body-bg; 
  margin: 0;
  padding: 0;
}

// Container system
.container {
  width: 100%;
  max-width: config.$container-max-width;
  margin: 0 auto;
  padding: 0 math.div(config.$grid-gutter-width, 2);
}

.container-fluid {
  width: 100%;
  margin: 0;
  padding: 0 math.div(config.$grid-gutter-width, 2);
}

// Grid system
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -#{math.div(config.$grid-gutter-width, 2)};
  margin-right: -#{math.div(config.$grid-gutter-width, 2)};
}

.col {
  flex: 1;
  padding: 0 math.div(config.$grid-gutter-width, 2);
  box-sizing: border-box;
}

// Column widths (1-12)
@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 percentage(math.div($i, 12));
    max-width: percentage(math.div($i, 12));
    padding: 0 math.div(config.$grid-gutter-width, 2);
    box-sizing: border-box;
  }
}

// Responsive columns
$breakpoints: (
  sm: config.$breakpoint-sm,
  md: config.$breakpoint-md,
  lg: config.$breakpoint-lg,
  xl: config.$breakpoint-xl
);

@each $label, $size in $breakpoints {
  @media (min-width: $size) {
    @for $i from 1 through 12 {
      .col-#{$label}-#{$i} {
        flex: 0 0 percentage(math.div($i, 12));
        max-width: percentage(math.div($i, 12));
        padding: 0 math.div(config.$grid-gutter-width, 2);
        box-sizing: border-box;
      }
    }
    
    .col-#{$label} {
      flex: 1;
      padding: 0 math.div(config.$grid-gutter-width, 2);
      box-sizing: border-box;
    }
    
    .col-#{$label}-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: 100%;
      padding: 0 math.div(config.$grid-gutter-width, 2);
      box-sizing: border-box;
    }
  }
}

// Column offsets
@for $i from 0 through 11 {
  .offset-#{$i} {
    margin-left: percentage(math.div($i, 12));
  }
}

@each $label, $size in $breakpoints {
  @media (min-width: $size) {
    @for $i from 0 through 11 {
      .offset-#{$label}-#{$i} {
        margin-left: percentage(math.div($i, 12));
      }
    }
  }
}

// Row utilities
.row-cols-1 > * {
  flex: 0 0 auto;
  width: 100%;
}

.row-cols-2 > * {
  flex: 0 0 auto;
  width: 50%;
}

.row-cols-3 > * {
  flex: 0 0 auto;
  width: 33.3333%;
}

.row-cols-4 > * {
  flex: 0 0 auto;
  width: 25%;
}

.row-cols-5 > * {
  flex: 0 0 auto;
  width: 20%;
}

.row-cols-6 > * {
  flex: 0 0 auto;
  width: 16.6667%;
}

// Responsive row columns
@each $label, $size in $breakpoints {
  @media (min-width: $size) {
    @for $i from 1 through 6 {
      .row-cols-#{$label}-#{$i} > * {
        flex: 0 0 auto;
        width: percentage(math.div(1, $i));
      }
    }
  }
}

// No gutters utility
.no-gutters {
  margin-right: 0;
  margin-left: 0;

  > .col,
  > [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
  }
}