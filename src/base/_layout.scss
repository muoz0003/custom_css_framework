// =============================================================================
// LAYOUT STYLING - Luz Helena's Responsibility
// =============================================================================

// Step 1: Import the variables (David will create these)
@use '../variables/config'as config;
@use '../variables/colors' as colors;


// Step 2: Style basic layout elements
body {
  font-family: 'Helvetica Neue', Arial, sans-serif;
  font-size: 1rem;
  line-height: 1.5;
  color: color.$body-color;              
  background-color: color.$body-bg; 
  margin: 0;
  padding: 0;
}

.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}
.container-fluid {
  width: 100%;
  margin: 0;
  padding: 0 1rem;
}

// TODO: Add styles for:
// - body (base body styling)
// - .container (centered content container)
// - .container-fluid (full-width container)
// - Basic properties: max-width, margin, padding

// Step 3: Create grid system basics
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -0.5rem;
  margin-right: -0.5rem;
  gap: 1rem;
}
.col {
  flex: 1;
  padding: 0.5rem;
  box-sizing: border-box;
}
.col-6 {
  flex: 0 0 50%;
  max-width: 50%;
  padding: 0 15px;
}

//column widths
@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 #{($i / 12 * 100)}%;
    max-width: #{($i / 12 * 100)}%;
    padding: 0 0.5rem;
    box-sizing: border-box;
 
  
  }
}




// Step 4: Create responsive grid columns

$breakpoints: (
  sm: config.$breakpoint-sm,
  md: config.$breakpoint-md,
  lg: config.$breakpoint-lg,
  xl: config.$breakpoint-xl
);

@each $label, $size in $breakpoints {
  @media (min-width: $size) {
    @for $i from 1 through 12 {
      .col-#{$label}-#{$i} {
        flex: 0 0 #{($i / 12 * 100)}%;
        max-width: #{($i / 12 * 100)}%;
        padding: 0 0.5rem;
        box-sizing: border-box;
        border: 1px solid color.$border-color;
      }
    }
  }
}



// Step 5: Create layout utility classes

// Display Utilities
.d-block {
  display: block !important;
}
.d-inline {
  display: inline !important;
}
.d-flex {
  display: flex !important;
}

// Flexbox Justify Content Utilities
.justify-content-center {
  justify-content: center !important;
}
.justify-content-between {
  justify-content: space-between !important;
}
.justify-content-end {
  justify-content: flex-end !important;
}

// Flexbox Align Items Utilities
.align-items-center {
  align-items: center !important;
}
.align-items-start {
  align-items: flex-start !important;
}
.align-items-end {
  align-items: flex-end !important;
}


// Step 6: Create spacing utilities for layout


// Height Utilities
.h-25 {
  height: 25% !important;
}
.h-50 {
  height: 50% !important;
}
.h-75 {
  height: 75% !important;
}
.h-100 {
  height: 100% !important;
}
// - .w-25, .w-50, .w-75, .w-100 (width utilities)
.w-25 {
  width: 25% !important;
}
.w-50 {
  width: 50% !important;
}
.w-75 {
  width: 75% !important;
}
.w-100 {
  width: 100% !important;
}
// - .h-25, .h-50, .h-75, .h-100 (height utilities)
.h-25 {
  height: 25% !important;
}
.h-50 {
  height: 50% !important;
}
.h-75 {
  height: 75% !important;
}
.h-100 {
  height: 100% !important;
}


// NOTES:
// - Wait for David to create variables before using them
// - Focus on creating a simple but functional grid system
// - Test layout on different screen sizes
// - Consider mobile-first approach for responsive design
// - Make sure containers and columns work well together